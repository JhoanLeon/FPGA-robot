// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "06/29/2021 13:07:44"
                                                                                
// Verilog Test Bench template for design : BB_SYSTEM
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ns

module TB_SYSTEM();
// constants                                           
// general purpose registers
reg eachvec;

parameter TCK = 20; // clock period in ns of 50MHz
//parameter CLK_FREQ = 1000000000 / TCK; // Frequenzy in HZ (50MHz)

// test vector input registers
reg TB_SYSTEM_CLOCK_50;
reg TB_SYSTEM_Reset_InHigh;

reg TB_SYSTEM_ready_InHigh;

// wires                                               
wire TB_SYSTEM_done_Out;


// assign statements (if any)                          
BB_SYSTEM u1 (

	//////////// INPUTS //////////
	.BB_SYSTEM_CLOCK_50(TB_SYSTEM_CLOCK_50),
	.BB_SYSTEM_Reset_InHigh(TB_SYSTEM_Reset_InHigh),
	
	.BB_SYSTEM_READY_In(TB_SYSTEM_ready_InHigh),
//	BB_SYSTEM_VX_InBus, // local velocity vx in m/s (notation fixed point 32b)
//	BB_SYSTEM_VY_InBus, // local velocity vy in m/s (in notation fixed point 32b)
//	BB_SYSTEM_WZ_InBus, // local velocity wz in rad/s (in notation fixed point 32b)
//	BB_SYSTEM_THETA_InBus, // rotation angle in degrees (in notation fixed point 32b)

	//////////// OUTPUTS //////////
	.BB_SYSTEM_DONE_Out(TB_SYSTEM_done_Out)
//	BB_SYSTEM_VX_OutBus,
//	BB_SYSTEM_VY_OutBus,
//	BB_SYSTEM_WZ_OutBus

);

initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
TB_SYSTEM_CLOCK_50 <= 1'b0;                                              
// --> end                                             
$display("Running testbench");                       
end   
     
	  
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)   
	#(TCK/2) TB_SYSTEM_CLOCK_50 <= ~ TB_SYSTEM_CLOCK_50;
initial	begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin    
										
	#0	    TB_SYSTEM_Reset_InHigh <= 1'b1;
			 TB_SYSTEM_ready_InHigh <= 1'b0; 
			 
	#500   TB_SYSTEM_Reset_InHigh <= 1'b0;
			 TB_SYSTEM_ready_InHigh <= 1'b0; 
			 
	#500   TB_SYSTEM_Reset_InHigh <= 1'b0;
			 TB_SYSTEM_ready_InHigh <= 1'b1;
		 
	#500   TB_SYSTEM_Reset_InHigh <= 1'b0;
			 TB_SYSTEM_ready_InHigh <= 1'b0;
		
	#2000  TB_SYSTEM_Reset_InHigh <= 1'b0;
			 TB_SYSTEM_ready_InHigh <= 1'b1;  
		
	#500   TB_SYSTEM_Reset_InHigh <= 1'b0;
			 TB_SYSTEM_ready_InHigh <= 1'b0;  		
	
@eachvec;
$finish;                                           
// --> end                                             
end
                                                    
endmodule

