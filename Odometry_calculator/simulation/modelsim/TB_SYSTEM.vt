// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "10/18/2021 12:31:41"
                                                                                
// Verilog Test Bench template for design : BB_SYSTEM
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ns
module TB_SYSTEM();
// constants                                           
// general purpose registers
reg eachvec;
parameter TCK = 20; // 20ns -> 50MHz clock
// test vector input registers
reg TB_SYSTEM_CLOCK_50;
reg TB_SYSTEM_Reset_InLow;
reg TB_SYSTEM_SETBEGIN_InLow;
reg [16:0] TB_SYSTEM_THETA_InBus;
reg [16:0] TB_SYSTEM_W1_InBus;
reg [16:0] TB_SYSTEM_W2_InBus;
reg [16:0] TB_SYSTEM_W3_InBus;
reg [16:0] TB_SYSTEM_W4_InBus;
// wires                                               
wire [16:0]  TB_SYSTEM_POSX_OutBus;
wire [16:0]  TB_SYSTEM_POSY_OutBus;
wire [16:0]  TB_SYSTEM_THETA_OutBus;

// assign statements (if any)                          
BB_SYSTEM i1 (
// port map - connection between master ports and signals/registers   
	.BB_SYSTEM_CLOCK_50(TB_SYSTEM_CLOCK_50),
	.BB_SYSTEM_POSX_OutBus(TB_SYSTEM_POSX_OutBus),
	.BB_SYSTEM_POSY_OutBus(TB_SYSTEM_POSY_OutBus),
	.BB_SYSTEM_Reset_InLow(TB_SYSTEM_Reset_InLow),
	.BB_SYSTEM_SETBEGIN_InLow(TB_SYSTEM_SETBEGIN_InLow),
	.BB_SYSTEM_THETA_InBus(TB_SYSTEM_THETA_InBus),
	.BB_SYSTEM_THETA_OutBus(TB_SYSTEM_THETA_OutBus),
	.BB_SYSTEM_W1_InBus(TB_SYSTEM_W1_InBus),
	.BB_SYSTEM_W2_InBus(TB_SYSTEM_W2_InBus),
	.BB_SYSTEM_W3_InBus(TB_SYSTEM_W3_InBus),
	.BB_SYSTEM_W4_InBus(TB_SYSTEM_W4_InBus)
);

initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
TB_SYSTEM_CLOCK_50 <= 1'b0;                                              
// --> end                                             
$display("Running testbench");                       
end   
     
	  
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)   
	#(TCK/2) TB_SYSTEM_CLOCK_50 <= ~ TB_SYSTEM_CLOCK_50;
initial	begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin    

	// 0 CHECK:
	#0	    TB_SYSTEM_Reset_InLow <= 1'b0;
			 TB_SYSTEM_SETBEGIN_InLow <= 1'b1; 
			 TB_SYSTEM_W1_InBus <= 17'b0; // |S|IIIIIIIIIIIIIIII|FFFFFFFFFFFFFFF|										
			 TB_SYSTEM_W2_InBus <= 17'b0;
			 TB_SYSTEM_W3_InBus <= 17'b0;
			 TB_SYSTEM_W4_InBus <= 17'b0;
			 TB_SYSTEM_THETA_InBus <= 17'b0;
			 
	// 1 CHECK:
	#500   TB_SYSTEM_Reset_InLow <= 1'b1;
			 TB_SYSTEM_SETBEGIN_InLow <= 1'b1; 
			 TB_SYSTEM_W1_InBus <= 17'b0_00001111_00000000; // 15 rad/s	-> +0.5436m/s Y									
			 TB_SYSTEM_W2_InBus <= 17'b0_00001111_00000000;
			 TB_SYSTEM_W3_InBus <= 17'b0_00001111_00000000;
			 TB_SYSTEM_W4_InBus <= 17'b0_00001111_00000000;
		    TB_SYSTEM_THETA_InBus<= 17'b0_01011010_00000000; // 90deg

	// 2 CHECK:
	#15000000   TB_SYSTEM_Reset_InLow <= 1'b1;
			 TB_SYSTEM_SETBEGIN_InLow <= 1'b1; 
			 TB_SYSTEM_W1_InBus <= 17'b0_00001111_00000000; // 15 rad/s	-> +0.5436m/s Y									
			 TB_SYSTEM_W2_InBus <= 17'b0_00001111_00000000;
			 TB_SYSTEM_W3_InBus <= 17'b0_00001111_00000000;
			 TB_SYSTEM_W4_InBus <= 17'b0_00001111_00000000;
		    TB_SYSTEM_THETA_InBus<= 17'b0_01011010_00000000; // 90deg			 
			 
//	// 3 CHECK:
//	#15000000   TB_SYSTEM_Reset_InLow <= 1'b1;
//			 TB_SYSTEM_SETBEGIN_InLow <= 1'b1;
//			 TB_SYSTEM_W1_InBus <= 17'b1_00001111_00000000; // -15 rad/s -> -0.5436m/s Y											
//			 TB_SYSTEM_W2_InBus <= 17'b1_00001111_00000000;
//			 TB_SYSTEM_W3_InBus <= 17'b1_00001111_00000000;
//			 TB_SYSTEM_W4_InBus <= 17'b1_00001111_00000000;
//			 TB_SYSTEM_THETA_InBus<= 17'b0_01011010_00000000; // 90deg
//			 
//	// 4 CHECK:
//	#15000000   TB_SYSTEM_Reset_InLow <= 1'b1;
//			 TB_SYSTEM_SETBEGIN_InLow <= 1'b1;
//			 TB_SYSTEM_W1_InBus <= 17'b1_00001111_00000000; // -15 rad/s -> -0.5436m/s X											
//			 TB_SYSTEM_W2_InBus <= 17'b0_00001111_00000000;
//			 TB_SYSTEM_W3_InBus <= 17'b0_00001111_00000000;
//			 TB_SYSTEM_W4_InBus <= 17'b1_00001111_00000000;
//			 TB_SYSTEM_THETA_InBus<= 17'b0_01011010_00000000; // 90deg
//		
//	// 5 CHECK:
//	#15000000   TB_SYSTEM_Reset_InLow <= 1'b1;
//			 TB_SYSTEM_SETBEGIN_InLow <= 1'b1;
//			 TB_SYSTEM_W1_InBus <= 17'b0_00001111_00000000; // +15 rad/s -> +0.5436m/s X											
//			 TB_SYSTEM_W2_InBus <= 17'b1_00001111_00000000;
//			 TB_SYSTEM_W3_InBus <= 17'b1_00001111_00000000;
//			 TB_SYSTEM_W4_InBus <= 17'b0_00001111_00000000;
//			 TB_SYSTEM_THETA_InBus<= 17'b0_01011010_00000000; // 90deg
//
//	// 6 CHECK:
//	#15000000   TB_SYSTEM_Reset_InLow <= 1'b1;
//			 TB_SYSTEM_SETBEGIN_InLow <= 1'b1;
//			 TB_SYSTEM_W1_InBus <= 17'b0_00001111_00000000; // +15 rad/s -> +0.5436m/s X											
//			 TB_SYSTEM_W2_InBus <= 17'b1_00001111_00000000;
//			 TB_SYSTEM_W3_InBus <= 17'b1_00001111_00000000;
//			 TB_SYSTEM_W4_InBus <= 17'b0_00001111_00000000;
//			 TB_SYSTEM_THETA_InBus<= 17'b0_01011010_00000000; // 90deg

//	// 7 CHECK:
//	#15000000   TB_SYSTEM_Reset_InLow <= 1'b1;
//			 TB_SYSTEM_SETBEGIN_InLow <= 1'b0; // reset position
//			 TB_SYSTEM_W1_InBus <= 17'b0_00001111_00000000; 										
//			 TB_SYSTEM_W2_InBus <= 17'b1_00001111_00000000;
//			 TB_SYSTEM_W3_InBus <= 17'b1_00001111_00000000;
//			 TB_SYSTEM_W4_InBus <= 17'b0_00001111_00000000;
//			 TB_SYSTEM_THETA_InBus<= 17'b0_01011010_00000000;

	// 8 CHECK:
	#15000000   TB_SYSTEM_Reset_InLow <= 1'b1;
			 TB_SYSTEM_SETBEGIN_InLow <= 1'b1; 
			 TB_SYSTEM_W1_InBus <= 17'b0_00001111_00000000; // +15 rad/s -> +0.5436m/s Y									
			 TB_SYSTEM_W2_InBus <= 17'b0_00001111_00000000;
			 TB_SYSTEM_W3_InBus <= 17'b0_00001111_00000000;
			 TB_SYSTEM_W4_InBus <= 17'b0_00001111_00000000;
		    TB_SYSTEM_THETA_InBus<= 17'b0_01011010_00000000; // 90deg			 
//			 			 
//	// 9 CHECK:
//	#15000000   TB_SYSTEM_Reset_InLow <= 1'b1;
//			 TB_SYSTEM_SETBEGIN_InLow <= 1'b1;
//			 TB_SYSTEM_W1_InBus <= 17'b0_00001111_00000000; // +15 rad/s -> +0.5436m/s X											
//			 TB_SYSTEM_W2_InBus <= 17'b1_00001111_00000000;
//			 TB_SYSTEM_W3_InBus <= 17'b1_00001111_00000000;
//			 TB_SYSTEM_W4_InBus <= 17'b0_00001111_00000000;
//			 TB_SYSTEM_THETA_InBus<= 17'b0_01011010_00000000; // 90deg			 
//			 
	// 10 CHECK:
	#15000000  TB_SYSTEM_Reset_InLow <= 1'b1;
			 TB_SYSTEM_SETBEGIN_InLow <= 1'b1; 
			 TB_SYSTEM_W1_InBus <= 17'b0;	
			 TB_SYSTEM_W2_InBus <= 17'b0;
			 TB_SYSTEM_W3_InBus <= 17'b0;
			 TB_SYSTEM_W4_InBus <= 17'b0;
			 TB_SYSTEM_THETA_InBus <= 17'b0;
		
	
	$display("Finishing testbench"); 
	$stop;	
@eachvec;
$finish;                                           
// --> end                                             
end

endmodule
