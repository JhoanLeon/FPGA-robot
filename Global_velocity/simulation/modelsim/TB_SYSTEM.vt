// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "06/29/2021 13:07:44"
                                                                                
// Verilog Test Bench template for design : BB_SYSTEM
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ns

module TB_SYSTEM();
// constants                                           
// general purpose registers
reg eachvec;

parameter TCK = 20; // clock period in ns of 50MHz
//parameter CLK_FREQ = 1000000000 / TCK; // Frequenzy in HZ (50MHz)

// test vector input registers
reg TB_SYSTEM_CLOCK_50;
reg TB_SYSTEM_Reset_InHigh;

reg TB_SYSTEM_ready_InHigh;
reg [31:0] TB_SYSTEM_vx_In;
reg [31:0] TB_SYSTEM_vy_In;
reg [31:0] TB_SYSTEM_wz_In;
reg [31:0] TB_SYSTEM_theta_In;

// wires                                               
wire TB_SYSTEM_done_Out;
wire [31:0] TB_SYSTEM_vx_Out;
wire [31:0] TB_SYSTEM_vy_Out;
wire [31:0] TB_SYSTEM_wz_Out;

// assign statements (if any)                          
BB_SYSTEM u1 (

	//////////// INPUTS //////////
	.BB_SYSTEM_CLOCK_50(TB_SYSTEM_CLOCK_50),
	.BB_SYSTEM_Reset_InHigh(TB_SYSTEM_Reset_InHigh),
	
	.BB_SYSTEM_READY_In(TB_SYSTEM_ready_InHigh),
	.BB_SYSTEM_VX_InBus(TB_SYSTEM_vx_In), // local velocity vx in m/s (notation fixed point 32b)
	.BB_SYSTEM_VY_InBus(TB_SYSTEM_vy_In), // local velocity vy in m/s (in notation fixed point 32b)
	.BB_SYSTEM_WZ_InBus(TB_SYSTEM_wz_In), // local velocity wz in rad/s (in notation fixed point 32b)
	.BB_SYSTEM_THETA_InBus(TB_SYSTEM_theta_In), // rotation angle in degrees (in notation fixed point 32b)

	//////////// OUTPUTS //////////
	.BB_SYSTEM_DONE_Out(TB_SYSTEM_done_Out),
	.BB_SYSTEM_VX_OutBus(TB_SYSTEM_vx_Out),
	.BB_SYSTEM_VY_OutBus(TB_SYSTEM_vy_Out),
	.BB_SYSTEM_WZ_OutBus(TB_SYSTEM_wz_Out)

);

initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
TB_SYSTEM_CLOCK_50 <= 1'b0;                                              
// --> end                                             
$display("Running testbench");                       
end   
     
	  
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)   
	#(TCK/2) TB_SYSTEM_CLOCK_50 <= ~ TB_SYSTEM_CLOCK_50;
initial	begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin    

	// 1 CHECK: VX_I = 0.0 , VY_I = 0.0 ; VX_O = 0.0 , VY_O = 0.0
	#0	    TB_SYSTEM_Reset_InHigh <= 1'b1;
			 TB_SYSTEM_ready_InHigh <= 1'b0; 
			 TB_SYSTEM_vx_In <= 32'b0; // |S|IIIIIIIIIIIIIIII|FFFFFFFFFFFFFFF|										
			 TB_SYSTEM_vy_In <= 32'b0;
			 TB_SYSTEM_wz_In <= 32'b0;
			 TB_SYSTEM_theta_In <= 32'b0;
			 
	// 2 CHECK: VX_I = 10.0 , VY_I = 0.0 ; VX_O = 10.000305 , VY_O = 0.002136	 
	#3000  TB_SYSTEM_Reset_InHigh <= 1'b0;
			 TB_SYSTEM_ready_InHigh <= 1'b1;
			 TB_SYSTEM_vx_In <= {1'b0,16'd10,15'b0};
			 TB_SYSTEM_vy_In <= 32'b0;
			 TB_SYSTEM_wz_In <= 32'b0;
			 TB_SYSTEM_theta_In <= 32'b0; 

	// 3 CHECK: VX_I = 0.0 , VY_I = 2.0 ; VX_O = 0.000427 , VY_O = 2.000061	  
	#3000  TB_SYSTEM_Reset_InHigh <= 1'b0;
			 TB_SYSTEM_ready_InHigh <= 1'b1;
			 TB_SYSTEM_vx_In <= {1'b0,16'd2,15'b0};
			 TB_SYSTEM_vy_In <= 32'b0;
			 TB_SYSTEM_wz_In <= 32'b0;
			 TB_SYSTEM_theta_In <= {1'b0,16'd90,15'b0}; 
			 
	// 4 CHECK: VX_I = 0.0 , VY_I = 10.0 ; VX_O = 0.002136 , VY_O = 10.000305		 
	#3000  TB_SYSTEM_Reset_InHigh <= 1'b0;
			 TB_SYSTEM_ready_InHigh <= 1'b1;
			 TB_SYSTEM_vx_In <= {1'b0,16'd10,15'b0};
			 TB_SYSTEM_vy_In <= 32'b0;
			 TB_SYSTEM_wz_In <= 32'b0;
			 TB_SYSTEM_theta_In <= {1'b0,16'd90,15'b0}; // this 90°
		
	// 5 CHECK: VX_I = -10.606602 , VY_I = 3.535534 ; VX_O = -10.608368 , VY_O = 3.531799		
	#3000  TB_SYSTEM_Reset_InHigh <= 1'b0;
			 TB_SYSTEM_ready_InHigh <= 1'b1;
			 TB_SYSTEM_vx_In <= {1'b0,16'd10,15'b0};
			 TB_SYSTEM_vy_In <= {1'b0,16'd5,15'b0};
			 TB_SYSTEM_wz_In <= 32'b0;
			 TB_SYSTEM_theta_In <= {1'b0,16'd135,15'b0};	 

	// 6 CHECK: VX_I = -10.0 , VY_I = 0.0 ; VX_O = -10.000305 , VY_O = 0.002136		 
	#3000  TB_SYSTEM_Reset_InHigh <= 1'b0;
			 TB_SYSTEM_ready_InHigh <= 1'b1;
			 TB_SYSTEM_vx_In <= {1'b0,16'd10,15'b0};
			 TB_SYSTEM_vy_In <= 32'b0;
			 TB_SYSTEM_wz_In <= 32'b0;
			 TB_SYSTEM_theta_In <= {1'b0,16'd180,15'b0}; // this 180°
			 
	// 7 CHECK: VX_I = 10.0 , VY_I = 5.0 ; VX_O = 9.999237 , VY_O = 5.002289		
	#3000  TB_SYSTEM_Reset_InHigh <= 1'b0;
			 TB_SYSTEM_ready_InHigh <= 1'b1;
			 TB_SYSTEM_vx_In <= {1'b0,16'd10,15'b0};
			 TB_SYSTEM_vy_In <= {1'b0,16'd5,15'b0};
			 TB_SYSTEM_wz_In <= 32'b0;
			 TB_SYSTEM_theta_In <= 32'b0;			
		
	// 8 CHECK: VX_I = 3.535534 , VY_I = 10.606602 ; VX_O = 3.539581 , VY_O = 10.605774	
	#3000  TB_SYSTEM_Reset_InHigh <= 1'b0;
			 TB_SYSTEM_ready_InHigh <= 1'b1;  		
			 TB_SYSTEM_vx_In <= {1'b0,16'd10,15'b0};
			 TB_SYSTEM_vy_In <= {1'b0,16'd5,15'b0};
			 TB_SYSTEM_wz_In <= 32'b0;
			 TB_SYSTEM_theta_In <= {1'b0,16'd45,15'b0};	

	// 9 CHECK: VX_I = -3.535534 , VY_I = -10.606602 ; VX = -3.539581 , VY = -10.605774			 
	#3000  TB_SYSTEM_Reset_InHigh <= 1'b0;
			 TB_SYSTEM_ready_InHigh <= 1'b1;  		
			 TB_SYSTEM_vx_In <= {1'b1,16'd10,15'b0};
			 TB_SYSTEM_vy_In <= {1'b1,16'd5,15'b0};
			 TB_SYSTEM_wz_In <= 32'b0;
			 TB_SYSTEM_theta_In <= {1'b0,16'd45,15'b0};	

	// 10 CHECK: VX_I = 10.0 , VY_I = -5.0 ; VX_O = 10.001373 , VY_O = -4.998017			 
	#3000  TB_SYSTEM_Reset_InHigh <= 1'b0;
			 TB_SYSTEM_ready_InHigh <= 1'b1;  		
			 TB_SYSTEM_vx_In <= {1'b0,16'd10,15'b0};
			 TB_SYSTEM_vy_In <= {1'b1,16'd5,15'b0};
			 TB_SYSTEM_wz_In <= 32'b0;
			 TB_SYSTEM_theta_In <= 32'b0;			

	// CHECK: VX_I = 0.0 , VY_I = 0.0 ; VX_O = 0.0 , VY_O = 0.0
	#3000	 TB_SYSTEM_Reset_InHigh <= 1'b0;
			 TB_SYSTEM_ready_InHigh <= 1'b0; 
			 TB_SYSTEM_vx_In <= 32'b0;										
			 TB_SYSTEM_vy_In <= 32'b0;
			 TB_SYSTEM_wz_In <= 32'b0;
			 TB_SYSTEM_theta_In <= 32'b0;	 
	
	
	$display("Finishing testbench"); 
	$stop;	
@eachvec;
$finish;                                           
// --> end                                             
end
                                                    
endmodule

